#!/usr/bin/env python3
import lief
import argparse
import re
import os

def parse_symbols(symbol_file):
    classes = []
    methods = []
    class_pattern = re.compile(r'_OBJC_CLASS_\$_(.+)')
    method_pattern = re.compile(r'[-+]\s*\[(\w+)\s+(\w+)\]')
    
    with open(symbol_file, 'r') as f:
        for line in f:
            # 处理LLVM-NM或strings的输出
            if '_OBJC_CLASS_$_' in line:
                match = class_pattern.search(line)
                if match:
                    classes.append(match.group(1))
            elif ']' in line:  # 方法检测
                match = method_pattern.search(line)
                if match:
                    class_name, method_name = match.groups()
                    methods.append((class_name, method_name))
    return classes, methods

def generate_header(classes, methods, output_path):
    os.makedirs(os.path.dirname(output_path), exist_ok=True)
    with open(os.path.join(output_path, "WechatPushMsgPage.h"), 'w') as f:
        f.write("// Auto-generated header (Mach-O compatible)\n\n")
        f.write("#import <Foundation/Foundation.h>\n\n")
        
        for cls in sorted(set(classes)):
            f.write(f"@interface {cls} : NSObject\n@end\n\n")
        
        for cls, method in sorted(set(methods), key=lambda x: x[0]):
            f.write(f"@interface {cls} (AutoGenerated)\n")
            f.write(f"- (void){method};\n")
            f.write("@end\n\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--dylib', required=True, help='Path to .dylib file')
    parser.add_argument('--symbols', required=True, help='Path to symbols file')
    parser.add_argument('--output', required=True, help='Output directory')
    args = parser.parse_args()

    classes, methods = parse_symbols(args.symbols)
    generate_header(classes, methods, args.output)
