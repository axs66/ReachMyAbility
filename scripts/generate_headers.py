#!/usr/bin/env python3
import lief
import argparse
import re

def parse_symbols(nm_output):
    classes = []
    methods = []
    class_pattern = re.compile(r'_OBJC_CLASS_\$_(.+)')
    method_pattern = re.compile(r'[-+]\s*\[(\w+)\s+(\w+)\]')
    
    with open(nm_output, 'r') as f:
        for line in f:
            if '_OBJC_CLASS_$_' in line:
                match = class_pattern.search(line)
                if match:
                    classes.append(match.group(1))
            elif ']' in line:  # 简单方法匹配
                match = method_pattern.search(line)
                if match:
                    class_name, method_name = match.groups()
                    methods.append((class_name, method_name))
    return classes, methods

def generate_header(classes, methods, output_path):
    with open(f"{output_path}/WechatPushMsgPage.h", 'w') as f:
        f.write("// Auto-generated header\n\n")
        f.write("#import <Foundation/Foundation.h>\n\n")
        
        for cls in set(classes):
            f.write(f"@interface {cls} : NSObject\n@end\n\n")
        
        for cls, method in set(methods):
            f.write(f"@interface {cls} (AutoGenerated)\n")
            f.write(f"- (void){method};\n")
            f.write("@end\n\n")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--dylib', required=True)
    parser.add_argument('--nm', required=True)
    parser.add_argument('--output', required=True)
    args = parser.parse_args()

    # 使用LIEF进行深度分析
    binary = lief.parse(args.dylib)
    classes, methods = parse_symbols(args.nm)
    
    generate_header(classes, methods, args.output)
